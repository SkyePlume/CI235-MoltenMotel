//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MoltenMotelLib
{
    public class Motel
    {

        public List<Room> rooms = new List<Room>();
        Random rand = new Random();
        Truck truck = new Truck();
        public Boolean gameOver;

        public int numberOfRooms() {
            return rooms.Count();
        }

        public Motel(int numberOfRooms)
        {
            createRooms(numberOfRooms);
            truck.truckID = 0;
            gameOver = false;
        }

        public void createRooms(int numberOfRooms)
        {
            for (int i = 0; i < numberOfRooms; i++)
            {
                rooms.Add(new Room(i, rand.Next(20, 50)));
            }
            for (int i = 0; i < numberOfRooms; i++)
            {
                // First room
                if (i == 0)
                {
                    rooms[0].temperatureChangeEvent += rooms[1].onTemperatureChange;
                }

                // Middle rooms
                if (i != 0 && i != numberOfRooms - 1)
                {
                    rooms[i].temperatureChangeEvent += rooms[i - 1].onTemperatureChange;
                    rooms[i].temperatureChangeEvent += rooms[i + 1].onTemperatureChange;
                }

                // Last room
                if (i == numberOfRooms - 1)
                {
                    rooms[i].temperatureChangeEvent += rooms[i - 1].onTemperatureChange;
                }
            }
            fireStart(numberOfRooms);
        }

        public void truckCheck() {
            for (int i = 0; i < rooms.Count; i++) {
                rooms[i].truckPresent = false;
                if (rooms[i].roomStatus == eRoomTemp.BURNEDOUT) { truck.truckStatus = eFiretruckStatus.FREE; };
            }
        }

        public void goToRoom(int rID){
            truckCheck();
            if (truck.goToRoom(rID)) {
                rooms[rID].truckPresent = true;
                Console.WriteLine("Your truck is at room " + rID + " and is currently " + truck.truckStatus + " and your coolant is " + truck.coolant);
            } else { rooms[rID].truckPresent = false; }
            

        }

        private void fireStart(int numberOfRooms)
        {
            Room randRoom = rooms.ElementAt(rand.Next(numberOfRooms));
            if (randRoom.onFire == false)
            {
                randRoom.onFire = true;
            }
            Console.WriteLine("Fire in room " + randRoom.roomID);
        }

        public void engineRecall() { truck.recall(); }

        public void engineRefill() { truck.refill(); }

        public void engineReport() {
            if (truck.truckStatus == eFiretruckStatus.ONCALL) {
                eRoomTemp rStatus;
                for (int i = 0; i < rooms.Count; i++) {
                    if (rooms[i].truckPresent) {
                        rStatus = rooms[i].roomStatus;
                        truck.report(rStatus);};
                }
                
            } else { truck.report(); }
        }

        public void roomList()
        {
            Console.WriteLine("Room List:");
            for (int i = 0; i < rooms.Count; i++)
            {
                Console.WriteLine("Room " + rooms[i].roomID + " is currently " + rooms[i].roomStatus + " at " + rooms[i].roomTemp + "degrees.");
            }
            Console.WriteLine("End of List.");
        }
        public void roomReport() {
            int safe = 0;
            int danger = 0;
            int smoulder = 0;
            int fire = 0;
            int burnedout = 0;
            for (int i = 0; i < rooms.Count; i++) {
                if (rooms[i].roomStatus == eRoomTemp.BURNEDOUT) {
                    burnedout++;
                }
                if (rooms[i].roomStatus == eRoomTemp.SAFE) {
                    safe++;
                }
                if (rooms[i].roomStatus == eRoomTemp.DANGER) {
                    danger++;
                }
                if (rooms[i].roomStatus == eRoomTemp.SMOULDER) {
                    smoulder++;
                }
                if (rooms[i].roomStatus == eRoomTemp.FIRE) {
                    fire++;
                }


            }
            Console.WriteLine("ROOM - AMOUNT\nSAFE - " + safe + "\nDANGER - " + danger + "\nSMOULDER - " + smoulder + "\nFIRE - " + fire + "\nBURNEDOUT - " + burnedout);

        }

        public void tickTock()
        {
            for (int i = 0; i < rooms.Count; i++)
            {
                rooms[i].tick();
            }
            truck.tick();
            
            int finished = 0;
            for (int i = 0; i < rooms.Count; i++) {
                if (!rooms[i].onFire) { finished++;
                }
                }
            if (finished == rooms.Count) {
                Console.WriteLine("GAME OVER! GAME OVER!");
                roomReport();
                gameOver = true;
            }
        }

    }
}